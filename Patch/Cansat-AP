/*
  Cansat-AP-Patched.ino
  Board: ESP32-S3 Dev Module (USB-C)
  Function: Start SoftAP reliably, receive UDP JSON, serve live dashboard at http://192.168.4.1/
*/

#include <WiFi.h>
#include <WiFiUdp.h>
#include <WebServer.h>
// Optional: Uncomment for deeper Wi-Fi control on some cores
// #include "esp_wifi.h"

#define CANSAT_SSID      "CANSAT_AP"
#define CANSAT_PASS      "cansat1234"
#define CANSAT_UDP_PORT  4210

// Network config
static const IPAddress AP_IP(192,168,4,1);
static const IPAddress AP_GW(192,168,4,1);
static const IPAddress AP_NETMASK(255,255,255,0);

// Globals
WiFiUDP udp;
WebServer server(80);

String lastJson = "{}";
unsigned long lastPacketMs = 0;
IPAddress lastSender;

const char INDEX_HTML[] PROGMEM = R"HTML(
<!doctype html>
<html>
<head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>CANSAT Dashboard</title>
<style>
:root { color-scheme: light dark; }
body { font-family: system-ui, Arial, sans-serif; margin: 16px; }
h1 { margin: 0 0 8px; font-size: 20px; }
.grid { display: grid; grid-template-columns: repeat(auto-fit,minmax(180px,1fr)); gap: 12px; }
.card { border: 1px solid #8883; border-radius: 8px; padding: 12px; }
.muted { opacity: .7; font-size: 12px; }
.badge { display:inline-block; padding:2px 6px; border-radius:999px; background:#0a84ff20; }
.big { font-size: 22px; font-weight: 600; }
pre { white-space: pre-wrap; word-break: break-word; }
</style>
</head>
<body>
  <h1>CANSAT Live</h1>
  <div class="muted">AP SSID: <b id="ssid"></b> • AP IP: <b id="apip"></b> • Last packet: <b id="age">—</b> ms • From: <b id="from">—</b></div>
  <div class="grid" style="margin-top:12px;">
    <div class="card"><div class="muted">Temperature</div><div class="big"><span id="temp">—</span> °C</div></div>
    <div class="card"><div class="muted">Pressure</div><div class="big"><span id="press">—</span> hPa</div></div>
    <div class="card"><div class="muted">BMP Altitude</div><div class="big"><span id="alt">—</span> m</div></div>
    <div class="card">
      <div class="muted">GPS</div>
      <div><span class="badge">lat</span> <span id="lat">—</span></div>
      <div><span class="badge">lon</span> <span id="lon">—</span></div>
      <div><span class="badge">alt</span> <span id="galt">—</span> m</div>
      <div><span class="badge">sat</span> <span id="sat">—</span></div>
      <div><span class="badge">speed</span> <span id="spd">—</span> km/h</div>
    </div>
    <div class="card"><div class="muted">Link RSSI</div><div class="big"><span id="rssi">—</span> dBm</div></div>
  </div>
  <div class="card" style="margin-top:12px;"><div class="muted">Raw JSON</div><pre id="raw">{}</pre></div>
<script>
const ssid = "%SSID%", apip = "%APIP%";
document.getElementById('ssid').textContent = ssid;
document.getElementById('apip').textContent = apip;
let lastSeen = 0, lastFrom = "—";
function v(x){ return (x===null||x===undefined||Number.isNaN(x)) ? "—" : +(+x).toFixed(2); }
async function poll(){
  try{
    const r = await fetch('/data'); if(!r.ok) throw new Error(r.status);
    const j = await r.json();
    lastSeen = j._server_ms - j._last_ms; lastFrom = j._from || "—";
    const s=j.sensor||{}, g=j.gps||{}, n=j.net||{};
    document.getElementById('temp').textContent  = v(s.temp_c);
    document.getElementById('press').textContent = v(s.pressure_hpa);
    document.getElementById('alt').textContent   = v(s.alt_m);
    document.getElementById('lat').textContent   = v(g.lat);
    document.getElementById('lon').textContent   = v(g.lon);
    document.getElementById('galt').textContent  = v(g.alt_m);
    document.getElementById('sat').textContent   = g.sat ?? "—";
    document.getElementById('spd').textContent   = v(g.speed_kmh);
    document.getElementById('rssi').textContent  = n.rssi ?? "—";
    document.getElementById('raw').textContent   = JSON.stringify(j, null, 2);
  }catch(e){}
  document.getElementById('age').textContent = lastSeen;
  document.getElementById('from').textContent = lastFrom;
  setTimeout(poll, 250);
}
poll();
</script>
</body>
</html>
)HTML";

String expandTemplate(const String& tpl) {
  String s = tpl;
  s.replace("%SSID%", String(CANSAT_SSID));
  s.replace("%APIP%", WiFi.softAPIP().toString());
  return s;
}

void handleRoot() {
  String html = expandTemplate(String(FPSTR(INDEX_HTML)));
  server.send(200, "text/html; charset=utf-8", html);
}

void handleData() {
  String body;
  body.reserve(lastJson.length() + 96);
  body += "{";
  body += "\"_server_ms\":" + String(millis());
  body += ",\"_last_ms\":" + String(lastPacketMs);
  body += ",\"_from\":\"" + lastSender.toString() + "\"";
  if (lastJson.length() > 2) {
    body += ",";
    if (lastJson.startsWith("{") && lastJson.endsWith("}")) {
      body += lastJson.substring(1, lastJson.length() - 1);
    } else {
      body += "\"payload\":" + lastJson;
    }
  }
  body += "}";
  server.send(200, "application/json", body);
}

// Robust AP start sequence
bool startSoftAPRobust() {
  Serial.println("[WiFi] Resetting radio...");
  WiFi.persistent(false);         // don't save config to NVS
  WiFi.disconnect(true, true);    // drop STA/AP, clear creds
  WiFi.mode(WIFI_MODE_NULL);
  delay(150);

  // Disable Wi-Fi power save for stability
  WiFi.setSleep(false);
  // If using esp_wifi.h: esp_wifi_set_ps(WIFI_PS_NONE);

  Serial.println("[WiFi] Configuring AP IP...");
  if (!WiFi.softAPConfig(AP_IP, AP_GW, AP_NETMASK)) {
    Serial.println("[WiFi] softAPConfig failed (continuing anyway)");
  }

  // Bring up AP mode
  WiFi.mode(WIFI_AP);
  delay(100);

  // 1) Minimal bring-up (most reliable on some cores)
  Serial.println("[WiFi] Starting SoftAP (minimal)...");
  bool ok = WiFi.softAP(CANSAT_SSID, CANSAT_PASS);
  if (ok) return true;

  Serial.println("[WiFi] Minimal start failed, retrying with clean reinit...");
  WiFi.mode(WIFI_MODE_NULL); delay(150);
  WiFi.mode(WIFI_AP); delay(100);
  ok = WiFi.softAP(CANSAT_SSID, CANSAT_PASS);
  if (ok) return true;

  // 2) Try explicit channel & max connections
  Serial.println("[WiFi] Retrying SoftAP with channel=6, maxconn=4...");
  ok = WiFi.softAP(CANSAT_SSID, CANSAT_PASS, 6, false, 4);
  if (ok) return true;

  // 3) As last resort, open AP (no password) for diagnostics
  Serial.println("[WiFi] Retrying OPEN AP (diagnostic)...");
  ok = WiFi.softAP(CANSAT_SSID);
  return ok;
}

void setup() {
  Serial.begin(115200);
  delay(1200); // allow USB CDC settle on S3

  Serial.println("\n==== CANSAT AP Boot ====");
  bool apOK = startSoftAPRobust();

  IPAddress ip = WiFi.softAPIP();
  Serial.printf("[WiFi] SoftAP %s\n", apOK ? "STARTED" : "FAILED");
  Serial.print("[WiFi] AP IP: "); Serial.println(ip);

  if (!apOK || ip == IPAddress((uint32_t)0)) {
    Serial.println("[WiFi] WARNING: AP not up. Check core version/USB power/antenna.");
    // Continue to attempt, but dashboard will be unreachable until AP starts.
  }

  // UDP receiver
  udp.begin(CANSAT_UDP_PORT);
  Serial.print("[UDP] Listening on port "); Serial.println(CANSAT_UDP_PORT);

  // Web server
  server.on("/", HTTP_GET, handleRoot);
  server.on("/data", HTTP_GET, handleData);
  server.on("/health", HTTP_GET, [](){
    String s = String("{\"ap\":\"") + CANSAT_SSID + "\",\"ip\":\"" + WiFi.softAPIP().toString() + "\"}";
    server.send(200, "application/json", s);
  });
  server.onNotFound([](){ server.send(404, "text/plain", "Not found"); });
  server.begin();
  Serial.println("[HTTP] Server started");

  Serial.println("==== Ready: connect to SSID and open http://192.168.4.1/ ====");
}

void loop() {
  server.handleClient();

  int packetSize = udp.parsePacket();
  if (packetSize > 0) {
    static char buf[1200];
    int len = udp.read(buf, sizeof(buf) - 1);
    if (len > 0) {
      buf[len] = '\0';
      String s(buf);
      if (s.startsWith("{") && s.indexOf('}') > 0) {
        lastJson = s;
      } else {
        lastJson = String("{\"payload\":\"") + s + "\"}";
      }
      lastPacketMs = millis();
      lastSender = udp.remoteIP();
      Serial.print("[UDP] RX "); Serial.print(lastSender); Serial.print(" : ");
      Serial.println(lastJson);
    }
  }
}
