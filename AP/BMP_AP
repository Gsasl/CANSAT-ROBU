#include <WiFi.h>
#include <HTTPClient.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>

#define WIFI_SSID "ESP32-Test-AP"
#define WIFI_PASS ""         // open AP by default
#define AP_IP    "192.168.4.1"
#define POST_URL "http://" AP_IP "/ingest"

Adafruit_BMP280 bmp; // I2C
const uint8_t BMP_ADDR = 0x76;

unsigned long lastSend = 0;
const unsigned long intervalMs = 1000; // 1 Hz
int seq = 0;

// Backoff control if AP returns 409 (export pending)
unsigned long backoffMs = 1000;
const unsigned long backoffMaxMs = 15000;

void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  Serial.print("Connecting to AP");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("Connected! IP: ");
  Serial.println(WiFi.localIP());
}

void setup() {
  Serial.begin(115200);
  delay(500);
  connectWiFi();

  if (!bmp.begin(BMP_ADDR)) {
    Serial.println("BMP280 not found. Halting.");
    while (true) delay(1000);
  }

  // Force early POST
  lastSend = 0;
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    connectWiFi();
  }

  unsigned long now = millis();
  if (now - lastSend >= intervalMs) {
    lastSend = now;

    float tempC = bmp.readTemperature();
    float pressurePa = bmp.readPressure();
    float pressureHpa = pressurePa / 100.0f;

    // Build JSON
    String payload = String("{\"seq\":") + seq +
                     ",\"timestamp_ms\":" + now +
                     ",\"temperature_c\":" + String(tempC, 2) +
                     ",\"pressure_hpa\":" + String(pressureHpa, 2) + "}";

    WiFiClient client;
    HTTPClient http;
    http.setTimeout(4000);
    if (http.begin(client, POST_URL)) {
      http.addHeader("Content-Type", "application/json");
      int code = http.POST(payload);
      Serial.print("POST seq "); Serial.print(seq); Serial.print(" -> code "); Serial.println(code);

      if (code == 200) {
        seq++;
        backoffMs = 1000; // reset backoff
      } else if (code == 409) {
        // Export pending on AP — back off to avoid spamming
        delay(backoffMs);
        backoffMs = min(backoffMaxMs, backoffMs * 2);
      } else {
        // Other errors — mild backoff
        delay(1000);
      }
      http.end();
    } else {
      Serial.println("HTTP begin failed");
      delay(1000);
    }
  }
}
